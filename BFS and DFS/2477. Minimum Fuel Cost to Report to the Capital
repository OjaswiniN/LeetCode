class Solution {
public:
     vector<vector<int>> edges;
     vector<bool> visit;
     long long ret=0;
     int count(int cur,int k) {
        int count=1;
        visit[cur]=true;
        for(auto i:edges[cur]) {
            if(visit[i]==false) {
                count+= count(i,k);
            }
        }
        if(cur!=0) {
            ret+=((count+k-1)/k);

        }
        return count;
    }

    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        int n =roads.size();
        edges.resize(n+1);
        visit.resize(n+1);
        for(auto road:roads) {
            edges[road[0]].push_back(road[1]);
            edges[road[1]].push_back(road[0]);
        }
        cnt(0,seats);
        return ret;
    }
};
