class Solution {
public:
       struct tmp{
        bool operator()(const pair<int,int>& a, const pair<int,int>& b){
            // <processing time, ID>
            if (a.first==b.first){
                // smaller index first
                return a.second>b.second;
            }
            // smaller processing time first
            return a.first>b.first;
        }
    };
    static bool cp(const vector<int>& a, const vector<int>& b){
        // smaller enqueue first
        return a[0]<b[0];
    }
    vector<int> getOrder(vector<vector<int>>& tasks) {
        priority_queue<pair<int,int>, vector<pair<int,int>>, tmp> pq;
        
        vector<int> ans;
        for (int i=0; i<tasks.size(); ++i){
            tasks[i].push_back(i); // task ID 
        }
        // the enqueue time is in ascending order
        sort(tasks.begin(),tasks.end(),cp);
        long time = 0;
        int i=0;
        while (i<tasks.size() || !pq.empty()){
            if (pq.empty()){
                time = max((long)tasks[i][0],time);
            }
            while (i<tasks.size() && time>=tasks[i][0]){
                pq.push(pair<int,int>(tasks[i][1],tasks[i][2]));
                i++;
            }
            ans.push_back(pq.top().second);
            time += pq.top().first;
            pq.pop();
        }
        
        return ans;
    }
        
    
};
