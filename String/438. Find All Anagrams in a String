Java Solution

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        if (s.length() < p.length()) return res;
        int[] map = new int[128];
        for (char c : p.toCharArray()) {
            map[c]++;
        }
        // two pointers to track the window
        int left = 0, right = 0;
        char[] chars = s.toCharArray();
        int m = s.length(), n = p.length(), count = n;
        while (right < m) {
            if (map[chars[right++]]-- > 0) count--;
            if (count == 0) res.add(left);
            if (right - left == n && map[chars[left++]]++ >= 0) count++;
        }
        return res;
        
    }
}


C++ Solution

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        unordered_map<char,int> p2,s2;
        vector<int> ans;
        for(int i=0;i<p.size();i++){
            p2[p[i]]++;  // adding p string to hash
            s2[s[i]]++;  // adding s string to hash of size p
            
        }
        if(p2 == s2) ans.push_back(0); // checking for index 0
        int j=0; //slide 
        for(int i=p.size();i<s.size();i++){
            s2[s[i]]++; 
            s2[s[j]]--;
            if(s2[s[j]] == 0) s2.erase(s[j]);
            j++;
            if(p2 == s2) ans.push_back(j);

        }

        return ans;
    }
};
